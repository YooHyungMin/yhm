import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

//작성자 : 유형민
//제목 :	프린터큐
//문제번호 : 1966
//수정일 : 2018. 7. 17
//언어 : Java

//구현 내용
// 1. Queue를 통해 자신보다 큰 값이 있으면 맨 뒤로 보낸다.
// 2. Queue에는 중요도와 순서를 저장하고 해당 큐와 중요도를 저장한 리스트를 정렬하여 비교한다.
// 3. Queue에 peek값이 리스트의 값보다 작으면 맨뒤로 보내고 크거나 같을 경우 우선순위 리스트에 저장한다.

public class Main {
	static Scanner sc = new Scanner(System.in);
	static Queue<Pair> importance = new LinkedList<>(); // 중요도와 순서를 저장한 큐
	static ArrayList<Integer> rank = new ArrayList<>(); // 우선순위를 저장한 리스트
	static ArrayList<Integer> value = new ArrayList<>(); // 중요도를 저장한 리스트

	public static void main(String[] args) {
		int testCase; // 테스트 케이스
		int N, M; // 문서의 수, 몇 번째 index가 궁금한지
		int importanceNum; // 중요도

		testCase = sc.nextInt();

		for (int i = 0; i < testCase; i++) {
			N = sc.nextInt();
			M = sc.nextInt();

			for (int j = 0; j < N; j++) { // 중요도와 순서 큐에 삽입, List에 중요도 삽입
				importanceNum = sc.nextInt();
				importance.add(new Pair(importanceNum, j));
				value.add(importanceNum);
			}

			//내림차순 정렬
			Collections.sort(value, new AscendingInteger());

			solve(M, N);

			clearQueue();
			value.clear();
			rank.clear();
		}
	}

	private static void solve(int M, int N) {
		Pair p;

		// 정렬된 값과 비교하여
		// 큐의 헤더 값이 정렬된 값보다 작으면 뒤에 큰값이 남아있는 것이므로 맨위로 보내고
		// 정렬된 값보다 크면 현재값이 제일 큰 값이므로 우선순위 리스트에 삽입
		for (int i = 0; i < N; i++) {
			for (int j = i; j < N; j++) {
				if (importance.peek().input < value.get(i)) {
					p = importance.poll();
					importance.add(p);
				} else {
					rank.add(importance.peek().order);
					importance.poll();
					break;
				}
			}
		}

		for (int i = 0; i < rank.size(); i++) { // 우선순위리스트를 통한 순서 출력
			if (rank.get(i) == M)
				System.out.println(i + 1);
		}
	}

	private static void clearQueue() {
		while (!importance.isEmpty())
			importance.poll();
	}
}

class AscendingInteger implements Comparator<Integer> {
	@Override
	public int compare(Integer a, Integer b) {
		return b.compareTo(a);
	}
}

class Pair {
	int input;
	int order;

	public Pair(int input, int order) {
		this.input = input;
		this.order = order;
	}
}