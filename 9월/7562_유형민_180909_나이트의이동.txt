import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

// 작성자 : 유형민
// 문제 : 백준 7562 나이트의 이동
// 날짜 : 2018. 9. 9

public class Main {
	static int N;
	static boolean visited[][];
	static Pair start;
	static Pair end;

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int testCase = Integer.parseInt(st.nextToken());

		for (int i = 0; i < testCase; i++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());

			visited = new boolean[N][N];

			// 시작점 좌표
			st = new StringTokenizer(br.readLine());
			int startX = Integer.parseInt(st.nextToken());
			int startY = Integer.parseInt(st.nextToken());
			start = new Pair(startX, startY, 0);

			st = new StringTokenizer(br.readLine());
			int endX = Integer.parseInt(st.nextToken());
			int endY = Integer.parseInt(st.nextToken());
			end = new Pair(endX, endY, 0);

			bfs();
		}
	}

	private static void bfs() {
		Queue<Pair> q = new LinkedList<>();

		q.add(start);
		visited[start.getX()][start.getY()] = true;

		while (!q.isEmpty()) {
			// 이동할 수 있는 경로
			int dx[] = { -1, -2, -2, -1, 1, 2, 2, 1 };
			int dy[] = { -2, -1, 1, 2, 2, 1, -1, -2 };

			Pair p = q.poll();
			// 좌표에 도달했을 경우 return
			if (end.getX() == p.getX() && end.getY() == p.getY()) {
				System.out.println(p.getCount());
				return;
			}

			for (int i = 0; i < 8; i++) {
				int tempX = p.getX() + dx[i];
				int tempY = p.getY() + dy[i];

				// 범위 넘어갈경우
				if (!isRange(tempX, tempY))
					continue;
				if (visited[tempX][tempY])
					continue;
				// 방문하지 않았을 경우 방문하여 count 증가
				if (!visited[tempX][tempY]) {
					visited[tempX][tempY] = true;
					q.add(new Pair(tempX, tempY, (p.getCount() + 1)));
				}
			}
		}

		// 도달하지 못하는 경우
		System.out.println(0);
	}

	private static boolean isRange(int x, int y) {
		if (x >= 0 && x < N && y >= 0 && y < N)
			return true;
		return false;
	}
}

class Pair {
	private int x;
	private int y;
	private int count;

	public Pair(int x, int y, int count) {
		this.x = x;
		this.y = y;
		this.count = count;
	}

	public int getX() {
		return this.x;
	}

	public int getY() {
		return this.y;
	}

	public int getCount() {
		return this.count;
	}
}
