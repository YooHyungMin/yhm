import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

//작성자 : 유형민
//제목 : 트리 슨회
//번호 : 1991
//수정일 : 2018. 8. 3
//언어 : Java

//배운 내용 : 트리 구조( left , root , right ), ASCII Code, BufferedReader > Scanner (약 40ms차이)
//하드코딩이 반복문보다 빠름
public class Main {
	static int tree[][];
	static int N;
	static int state;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		tree = new int[N + 1][2];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			String parent = st.nextToken();
			String leftChild = st.nextToken();
			String rightChild = st.nextToken();

			if (leftChild.charAt(0) == '.')
				tree[(int) (parent.charAt(0) - 'A')][0] = -1;
			else
				tree[(int) (parent.charAt(0) - 'A')][0] = leftChild.charAt(0) - 'A';

			if (rightChild.charAt(0) == '.')
				tree[(int) (parent.charAt(0) - 'A')][1] = -1;
			else
				tree[(int) (parent.charAt(0) - 'A')][1] = rightChild.charAt(0) - 'A';
		}

		state = 1;
		order(0);
		System.out.println();
		state = 2;
		order(0);
		System.out.println();
		state = 3;
		order(0);
	}

	private static void order(int root) {
		// 전위
		if (state == 1)
			System.out.print((char) (root + 'A'));

		if (tree[root][0] != -1)
			order(tree[root][0]);

		// 중위
		if (state == 2)
			System.out.print((char) (root + 'A'));

		if (tree[root][1] != -1)
			order(tree[root][1]);

		// 후위
		if (state == 3)
			System.out.print((char) (root + 'A'));
	}
}
