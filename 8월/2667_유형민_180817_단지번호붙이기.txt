import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.StringTokenizer;

//작성자 : 유형민
//제목 : 단지번호붙이기
//번호 : 2667번
//수정일 : 2018. 8. 17
//언어 : Java

public class Main {
	static int N;
	static int complex[][];
	static int complexCount, apartCount;
	static ArrayList<Integer> sort;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());

		complex = new int[N + 1][N + 1];
		sort = new ArrayList<>();

		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			String str = st.nextToken();

			//문자열을 정수로 변환
			for (int j = 1; j <= N; j++) {
				if (str.charAt(j - 1) == '0')
					complex[i][j] = (int) (str.charAt(j - 1) - '0');
				else if (str.charAt(j - 1) == '1')
					complex[i][j] = (int) (str.charAt(j - 1) - '1') + 1;
			}
		}

		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				//방문한 경우와 0일 경우 검사할 필요 없으니까 넘김
				if (complex[i][j] == -1 || complex[i][j] == 0)
					continue;
				//방문하지 않은 경우와 1일 경우
				else {
					result(i, j);
					complexCount++;
					sort.add(apartCount + 1);
					apartCount = 0;
				}
			}
		}
		
		//오름 차순
		Collections.sort(sort , new Ascending());
		System.out.println(complexCount);
		for (int i = 0; i < sort.size(); i++)
			System.out.println(sort.get(i));
	}

	private static void result(int x, int y) {
		int dx[] = { 0, 0, 1, -1 };
		int dy[] = { 1, -1, 0, 0 };

		complex[x][y] = -1;
		for (int i = 0; i < 4; i++) {
			int temp_x = x + dx[i];
			int temp_y = y + dy[i];

			// 범위가 넘어갈 경우
			if (!isRange(temp_x, temp_y))
				continue;
			// 1일 경우와 방문하지 않았을 경우
			if (complex[temp_x][temp_y] == 1) {
				apartCount++;
				result(temp_x, temp_y);
			}
		}
	}
	
	//범위를 넘어갔을 경우
	private static boolean isRange(int x, int y) {
		if (x > 0 && x < N + 1 && y > 0 && y < N + 1) {
			return true;
		}
		return false;
	}
}

class Ascending implements Comparator<Integer>{
	@Override
	public int compare(Integer a, Integer b) {
		// TODO Auto-generated method stub
		return a > b ? 1 : -1;
	}
	
}