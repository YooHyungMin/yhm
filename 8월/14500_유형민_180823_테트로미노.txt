import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

//작성자 : 유형민
//제목 : 테트로미노
//번호 : 14500
//수정일 : 2018. 8. 23
//언어 : Java

public class Main {
	static int N, M;
	static int paper[][];
	static boolean visited[][];
	static int MAX;
	static int sum;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		paper = new int[N][M];
		visited = new boolean[N][M];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				int map = Integer.parseInt(st.nextToken());
				paper[i][j] = map;
				visited[i][j] = false;
			}
		}

		result();
		System.out.println(MAX);
	}

	//모든 지점 확인
	private static void result() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				search(i, j);
				init();

				if (sum > MAX) {
					MAX = sum;
				}
			}
		}
	}

	// 인접한 칸 중 최댓값으로 이동
	private static void search(int x, int y) {
		PriorityQueue<Pair> pq = new PriorityQueue<>();
		Pair pi = new Pair(x, y, paper[x][y]);
		int count = 0;
		int dx[] = { 0, 0, -1, 1 };
		int dy[] = { 1, -1, 0, 0 };

		pq.add(pi);
		visited[x][y] = true;
		sum = 0;

		while (!pq.isEmpty()) {
			pi = pq.poll();

			sum += pi.num;
			count++;

			//4칸 이동 시 종료
			if (count == 4) {
				count = 0;
				break;
			}

			//주변 최댓값
			for (int i = 0; i < 4; i++) {
				int tempX = pi.x + dx[i];
				int tempY = pi.y + dy[i];

				if (!isRange(tempX, tempY))
					continue;

				if (!visited[tempX][tempY]) {
					visited[tempX][tempY] = true;
					pq.add(new Pair(tempX, tempY, paper[tempX][tempY]));
				}
			}
		}
	}

	private static boolean isRange(int x, int y) {
		if (x >= 0 && x < N && y >= 0 && y < M)
			return true;
		return false;
	}

	private static void init() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				visited[i][j] = false;
			}
		}
	}
}

class Pair implements Comparable<Pair> {
	int x;
	int y;
	int num;

	public Pair(int x, int y, int num) {
		this.x = x;
		this.y = y;
		this.num = num;
	}

	@Override
	public int compareTo(Pair p) {
		// TODO Auto-generated method stub
		return this.num < p.num ? 1 : -1;
	}
}