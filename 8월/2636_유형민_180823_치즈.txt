import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

//작성자 : 유형민
//제목 : 치즈
//번호 : 2636
//수정일 : 2018. 8. 23
//언어 : Java

public class Main {
	static int N, M;
	static int cheese[][];
	static boolean visited[][];
	static int cheeseCount;
	static int time;
	static boolean check = false;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		cheese = new int[N][M];
		visited = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				int map = Integer.parseInt(st.nextToken());
				cheese[i][j] = map;
				visited[i][j] = false;
			}
		}
		result();

		System.out.println(time + "\n" + cheeseCount);
	}

	private static void result() {
		while (true) {
			check = false;
			cheeseCount = 0;
			contact();
			melting();

			if (M != 1 || N != 1) {
				time++;
			}
			
			init();
			if (!check)
				return;
		}
	}

	private static void melting() {
		int dx[] = { 0, 0, -1, 1 };
		int dy[] = { 1, -1, 0, 0 };

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (cheese[i][j] == 2) {
					cheeseCount++;
					for (int k = 0; k < 4; k++) {
						if (!isRange(i + dx[k], j + dy[k]))
							continue;

						if (cheese[i + dx[k]][j + dy[k]] == 1) {
							check = true;
							break;
						} 
					}

					cheese[i][j] = 0;
				}
			}
		}
	}

	// 치즈 안 구멍과 바깥 공기 0, 치즈 1, 공기와 닿아서 녹일 부분 2
	private static void contact() {
		Queue<Point> q = new LinkedList<>();
		Point p = new Point(0, 0);
		int dx[] = { 0, 0, 1, -1 };
		int dy[] = { 1, -1, 0, 0 };

		q.add(p);
		visited[p.x][p.y] = true;
		while (!q.isEmpty()) {
			p = q.poll();
			for (int i = 0; i < 4; i++) {
				int x = p.x + dx[i];
				int y = p.y + dy[i];

				if (!isRange(x, y))
					continue;

				if (cheese[x][y] == 1) {
					cheese[x][y] = 2;
				}

				if (cheese[x][y] == 0 && !visited[x][y]) {
					visited[x][y] = true;
					q.add(new Point(x, y));
				}
			}
		}
	}

	private static void init() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				visited[i][j] = false;
			}
		}
	}

	private static boolean isRange(int x, int y) {
		if (x >= 0 && x < N && y >= 0 && y < M)
			return true;
		return false;
	}
}

class Point {
	int x;
	int y;

	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}
}