import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

//작성자 : 유형민
//제목 : 플로이드
//번호 : 11404
//수정일 : 2018. 8. 9
//언어 : Java
//필요 알고리즘 : 플로이드 알고리즘 ( 모든 정점 탐색 )

public class Main {
	static int N, M;
	static int vertex[][];

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());

		vertex = new int[N + 1][N + 1];
		for (int i = 0; i <= N; i++) {
			for (int j = 0; j <= N; j++) {
				if (i == j)
					vertex[i][j] = 0;
				else
					vertex[i][j] = 100001;
			}
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			int cost = Integer.parseInt(st.nextToken());

			vertex[x][y] = Math.min(vertex[x][y], cost);
		}

		result();

		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				if (vertex[i][j] == 100001)
					bw.write('0');
				else
					bw.write(Integer.toString(vertex[i][j]).toCharArray());
				bw.write(" ");
			}
			bw.write("\n");
		}

		bw.flush();
		bw.close();
	}

	// 시간 줄일 방법 생각하기
	public static void result() {
		for (int k = 1; k <= N; k++) {
			for (int i = 1; i <= N; i++) {
				for (int j = 1; j <= N; j++) {
					if (vertex[i][j] > vertex[i][k] + vertex[k][j])
						vertex[i][j] = vertex[i][k] + vertex[k][j];
				}
			}
		}
	}
}
